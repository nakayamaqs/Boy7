@model Boy8.Models.Story

@{
    ViewBag.Title = "创建新故事";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h4>宝贝，我想说的还有很多。。</h4>
    <hr />
    @using (Html.BeginForm("upload", "api", FormMethod.Post, new { @role = "form", @enctype = "multipart/form-data" }))
    {
    @Html.AntiForgeryToken()

    <div class="row fileupload-buttonbar story-resource">
        <div class="span7">
            <div class="well">
                <i class="icon-plus"></i><span>&nbsp;&nbsp;Add files...</span>
                <input type="file" id="fileupload" name="fileupload" accept="image/*" multiple="multiple">
                <button id="btnUploadAll" class="btn btn-success pull-right" type="button">
                    Upload All
                </button>
                <div class="clearfix">
                </div>
                <div class="progress">
                    <div class="bar" id="overallbar" style="width: 0%">
                    </div>
                </div>
            </div>
        </div>
        <div class="span7">
            <div class="well hide" id="filelistholder">
            </div>
        </div>
        <div class="span7">
        </div>
    </div>
    }
    @using (Html.BeginForm("Create", "Story", FormMethod.Post, new { @role = "form" }))
    {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Body, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.TextBoxFor(model => model.Body, new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.Body)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Abstract, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Abstract, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Abstract)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StoryCreatedOrSyncTime, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StoryCreatedOrSyncTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StoryCreatedOrSyncTime)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SyncAccount, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SyncAccount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SyncAccount)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SyncComment, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SyncComment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SyncComment)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SyncOther, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SyncOther, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SyncOther)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Rating, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryUploader")
    <script type="text/javascript">
        $(function () {
            $('#fileupload').fileupload({
                dataType: "json",
                url: "/api/upload",
                limitConcurrentUploads: 1,
                sequentialUploads: true,
                progressInterval: 100,
                maxChunkSize: 10000,
                add: function (e, data) {
                    $('#filelistholder').removeClass('hide');
                    data.context = $('<div />').text(data.files[0].name).appendTo('#filelistholder');
                    $('</div><div class="progress"><div class="bar" style="width:0%"></div></div>').appendTo(data.context);
                    $('#btnUploadAll').click(function () {
                        data.submit();
                    });
                },
                done: function (e, data) {
                    data.context.text(data.files[0].name + '... Completed');
                    $('</div><div class="progress"><div class="bar" style="width:100%"></div></div>').appendTo(data.context);
                },
                progressall: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#overallbar').css('width', progress + '%');
                },
                progress: function (e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    data.context.find('.bar').css('width', progress + '%');
                }
            });
        });
    </script>
}